# Generated by Django 3.2.9 on 2021-12-07 12:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('nome', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('cpf', models.CharField(blank=True, max_length=14, unique=True)),
                ('data_nascimento', models.DateField()),
                ('profissao', models.CharField(max_length=25)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnderecoCliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rua', models.CharField(max_length=50)),
                ('cidade', models.CharField(max_length=30)),
                ('estado', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('nome', models.CharField(max_length=50)),
                ('idade', models.IntegerField()),
                ('peso', models.CharField(max_length=50)),
                ('categoria', models.CharField(blank=True, choices=[('Ca', 'Cachorro'), ('Ga', 'Gato'), ('Pa', 'Pássaro'), ('Ha', 'Hamister')], max_length=2, null=True)),
                ('cor', models.CharField(blank=True, choices=[('Pr', 'Preto'), ('Br', 'Branco'), ('Ci', 'Cinza'), ('Ma', 'Malhado'), ('Cr', 'Creme'), ('Mr', 'Marrom'), ('Am', 'Amarelo')], max_length=2, null=True)),
                ('raca', models.CharField(blank=True, max_length=20, null=True)),
                ('genero', models.CharField(blank=True, choices=[('Fe', 'Femea'), ('Ma', 'Macho')], max_length=2, null=True)),
                ('proprietario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pet_app.cliente')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConsultaPet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(auto_now_add=True)),
                ('doutor', models.CharField(blank=True, choices=[('Ma', 'Maria Lima'), ('Fc', 'Fernanda Cardoso Lira'), ('Af', 'Amanda Finamor'), ('Vm', 'Victoria Misson'), ('As', 'Amanda dos Santos Silva'), ('Cv', 'Cássia Vasconcellos'), ('Rp', 'Regina Elis Pascoal')], max_length=2, null=True)),
                ('motivo_consulta', models.CharField(max_length=200)),
                ('medicamento_atual', models.TextField()),
                ('medicamentos_prescritos', models.TextField()),
                ('exames', models.TextField()),
                ('especialidade', models.CharField(blank=True, choices=[('Cg', 'Clinico Geral'), ('Cd', 'Cardiologia'), ('De', 'Dermatologia'), ('Fi', 'Fisioterapia'), ('He', 'Hematologia'), ('Ne', 'Neurologia'), ('Or', 'Ortopedia')], max_length=2, null=True)),
                ('observacoes', models.TextField()),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pet_app.pet')),
            ],
        ),
        migrations.AddField(
            model_name='cliente',
            name='endereco',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pet_app.enderecocliente'),
        ),
        migrations.CreateModel(
            name='Funcionario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome', models.CharField(max_length=50)),
                ('nascimento', models.DateField()),
                ('cargo', models.IntegerField(choices=[(1, 'Médico Veterinario'), (2, 'Financeiro'), (3, 'Atendimento')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
